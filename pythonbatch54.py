# -*- coding: utf-8 -*-
"""Copy of Copy of trial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bWM9I-G-QDn6oH5EmfhJ83ffpDfnGw7z
"""

!pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c smartphone-decimeter-2022

!unzip \*.zip && rm *.zip

!pip install geopandas

!pip install shap

import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
import os
!pip install folium
import pickle
import sys
import warnings
from glob import glob
import requests
import folium
from shapely.geometry import Point,shape
import shapely.wkt
from geopandas import GeoDataFrame
import shap
import xgboost
from scipy.stats import spearmanr
from sklearn.ensemble import(ExtraTreesRegressor,GradientBoostingRegressor,RandomForestRegressor)
from sklearn.metrics import accuracy_score,mean_squared_error
from tqdm.notebook import tqdm
pd.options.mode.use_inf_as_na=True

import warnings
warnings.filterwarnings("ignore")

import pandas as pd
df=pd.read_csv('sample_submission.csv')

df.head()

df.info()

df['tripId'].value_counts()

X=df.iloc[:,[2,3]].values
print(X)

y=df.iloc[:,0:4].values
print(y)

import json
raw=open('metadata/raw_state_bit_map.json','r')
json.load(raw)

import json
bit = open('metadata/accumulated_delta_range_state_bit_map.json', 'r')
json.load(bit)

mapping=pd.read_csv('metadata/constellation_type_mapping.csv')
mapping

ground = pd.read_csv('train/2020-05-15-US-MTV-1/GooglePixel4XL/ground_truth.csv')
ground

"""MessageType - "Fix", the prefix of sentence.

Provider - "GT", short for ground truth.


[Latitude/Longitude]Degrees - The WGS84 latitude, longitude (in decimal degrees) estimated by the reference GNSS receiver (NovAtel SPAN). When extracting from the NMEA file, linear interpolation has been applied to align the location to the expected non-integer timestamps.


AltitudeMeters - The height above the WGS84 ellipsoid (in meters) estimated by the reference GNSS receiver.


SpeedMps* - The speed over ground in meters per second.


AccuracyMeters - The estimated horizontal accuracy radius in meters of this location at the 68th percentile confidence level. This means that there is a 68% chance that the true location of the device is within a distance of this uncertainty of the reported location.


BearingDegrees - Bearing is measured in degrees clockwise from north. It ranges from 0 to 359.999 degrees.


UnixTimeMillis - An integer number of milliseconds since the GPS epoch (1970/1/1 midnight UTC). Converted from GnssClock.


"""

imu= pd.read_csv('train/2020-05-15-US-MTV-1/GooglePixel4XL/device_imu.csv')
imu

"""MessageType - which of the three instruments the row's data is from.

utcTimeMillis - The sum of elapsedRealtimeNanos below and the estimated device boot time at UTC, after a recent NTP (Network Time Protocol) sync.


Measurement[X/Y/Z] - [x/y/z]_uncalib without bias compensation.


Bias[X/Y/Z]MicroT - Estimated [x/y/z]_bias. Null in datasets collected in earlier dates.
"""

gnss = pd.read_csv('train/2020-05-15-US-MTV-1/GooglePixel4XL/device_gnss.csv')
gnss

"""MessageType - "Raw", the prefix of sentence.

utcTimeMillis - Milliseconds since UTC epoch (1970/1/1), converted from GnssClock.


TimeNanos - The GNSS receiver internal hardware clock value in nanoseconds.


LeapSecond - The leap second associated with the clock's time.


FullBiasNanos - The difference between hardware clock (getTimeNanos()) inside GPS receiver and the true GPS time since 0000Z, January 6, 1980, in nanoseconds.


BiasNanos - The clock's sub-nanosecond bias.


BiasUncertaintyNanos - The clock's bias uncertainty (1-sigma) in nanoseconds.

DriftNanosPerSecond - The clock's drift in nanoseconds per second.


DriftUncertaintyNanosPerSecond - The clock's drift uncertainty (1-sigma) in nanoseconds per second.


HardwareClockDiscontinuityCount - Count of hardware clock discontinuities.


Svid - The satellite ID.


TimeOffsetNanos - The time offset at which the measurement was taken in nanoseconds.


State - Integer signifying sync state of the satellite. Each bit in the integer attributes to a particular state information of the measurement. See the metadata/raw_state_bit_map.json file for the mapping between bits and states.


ReceivedSvTimeNanos - The received GNSS satellite time, at the measurement time, in nanoseconds.


ReceivedSvTimeUncertaintyNanos - The error estimate (1-sigma) for the received GNSS time, in nanoseconds.


Cn0DbHz - The carrier-to-noise density in dB-Hz.


PseudorangeRateMetersPerSecond - The pseudorange rate at the timestamp in m/s.


PseudorangeRateUncertaintyMetersPerSecond - The pseudorange's rate uncertainty (1-sigma) in m/s.


AccumulatedDeltaRangeState - This indicates the state of the 'Accumulated Delta Range' measurement. Each bit in the integer attributes to state of the measurement. See the metadata/accumulated_delta_range_state_bit_map.json file for the mapping between bits and states.


AccumulatedDeltaRangeMeters - The accumulated delta range since the last channel reset, in meters.

AccumulatedDeltaRangeUncertaintyMeters - The accumulated delta range's uncertainty (1-sigma) in meters.


CarrierFrequencyHz - The carrier frequency of the tracked signal.


MultipathIndicator - A value indicating the 'multipath' state of the event.


ConstellationType - GNSS constellation type. The mapping to human readable values is provided in the metadata/constellation_type_mapping.csv file.


CodeType - The GNSS measurement's code type. Only available in recent logs.


ChipsetElapsedRealtimeNanos - The elapsed real-time of this clock since system boot, in nanoseconds. Only available in recent logs.


ArrivalTimeNanosSinceGpsEpoch - An integer number of nanoseconds since the GPS epoch (1980/1/6 midnight UTC). Its value equals round((Raw::TimeNanos - Raw::FullBiasNanos), for each unique epoch described in the Raw sentences.


RawPseudorangeMeters - Raw pseudorange in meters. It is the product between the speed of light and the time difference from the signal transmission time (receivedSvTimeInGpsNanos) to the signal arrival time (Raw::TimeNanos - Raw::FullBiasNanos - Raw;;BiasNanos). Its uncertainty can be approximated by the product between the speed of light and the ReceivedSvTimeUncertaintyNanos.


SignalType - The GNSS signal type is a combination of the constellation name and the frequency band. Common signal types measured by smartphones include GPS_L1, GPS_L5, GAL_E1, GAL_E5A, GLO_G1, BDS_B1I, BDS_B1C, BDS_B2A, QZS_J1, and QZS_J5.


ReceivedSvTimeNanosSinceGpsEpoch - The signal transmission time received by the chipset, in the numbers of nanoseconds since the GPS epoch. Converted from ReceivedSvTimeNanos, this derived value is in a unified time scale for all constellations, while ReceivedSvTimeNanos refers to the time of day for GLONASS and the time of week for non-GLONASS constellations.

SvPosition[X/Y/Z]EcefMeters - The satellite position (meters) in an ECEF coordinate frame at best estimate of “true signal transmission time” defined as ttx = receivedSvTimeInGpsNanos - satClkBiasNanos (defined below). They are computed with the satellite broadcast ephemeris, and have ~1-meter error with respect to the true satellite position.


Sv[Elevation/Azimuth]Degrees - The elevation and azimuth in degrees of the satellite. They are computed using the WLS estimated user position.


SvVelocity[X/Y/Z]EcefMetersPerSecond - The satellite velocity (meters per second) in an ECEF coordinate frame at best estimate of “true signal transmission time” ttx. They are computed with the satellite broadcast ephemeris, with this algorithm.


SvClockBiasMeters - The satellite time correction combined with the satellite hardware delay in meters at the signal transmission time (receivedSvTimeInGpsNanos). Its time equivalent is termed as satClkBiasNanos. satClkBiasNanos equals the satelliteTimeCorrection minus the satelliteHardwareDelay. As defined in IS-GPS-200H Section 20.3.3.3.3.1, satelliteTimeCorrection is calculated from ∆tsv = af0 + af1(t - toc) + af2(t - toc)2 + ∆tr, while satelliteHardwareDelay is defined in Section 20.3.3.3.3.2. Parameters in the equations above are provided on the satellite broadcast ephemeris.

SvClockDriftMetersPerSecond - The satellite clock drift in meters per second at the signal transmission time (receivedSvTimeInGpsNanos). It equals the difference of the satellite clock biases at t+0.5s and t-0.5s.


IsrbMeters - The Inter-Signal Range Bias (ISRB) in meters from a non-GPS-L1 signal to GPS-L1 signals. For example, when the isrbM of GPS L5 is 1000m, it implies that a GPS L5 pseudorange is 1000m longer than the GPS L1 pseudorange transmitted by the same GPS satellite. It's zero for GPS-L1 signals. ISRB is introduced in the GPS chipset level and estimated as a state in the Weighted Least Squares engine.


IonosphericDelayMeters - The ionospheric delay in meters, estimated with the Klobuchar model.


TroposphericDelayMeters - The tropospheric delay in meters, estimated with the EGNOS model by Nigel Penna, Alan Dodson and W. Chen (2001).


WlsPositionXEcefMeters - WlsPositionYEcefMeters,WlsPositionZEcefMeters: User positions in ECEF estimated by a Weighted-Least-Square (WLS) solver.

"""

import folium
from folium import plugins
df_locs=list(ground[['LatitudeDegrees','LongitudeDegrees']].values)
fol_map=folium.Map([ground['LatitudeDegrees'].median(),ground['LongitudeDegrees'].median()],zoom_start=11)
heat_map=plugins.HeatMap(df_locs)
fol_map.add_child(heat_map)
markers=plugins.MarkerCluster(locations=df_locs)
fol_map.add_child(markers)

f = open('train/2020-05-15-US-MTV-1/GooglePixel4XL/supplemental/gnss_log.txt', 'r')
log = f.read()
f.close()
log[:500]

"""Text To Pandas"""

path ='train/2020-05-15-US-MTV-1/GooglePixel4XL/supplemental/gnss_log.txt'
gnss_section_names = {'Raw','UncalAccel', 'UncalGyro', 'UncalMag', 'Fix', 'Status', 'OrientationDeg'}
with open(path) as f_open:
        datalines = f_open.readlines()

datas = {k: [] for k in gnss_section_names}
gnss_map = {k: [] for k in gnss_section_names}
for dataline in datalines:
    if dataline !='' and dataline[0] !='':
      is_header = dataline.startswith('#')
      dataline = dataline.strip('#').strip().split(',')
      # skip over notes, version numbers, etc
      if is_header and dataline[0] in gnss_section_names:
          gnss_map[dataline[0]] = dataline[1:]
      elif not is_header:
          if dataline !='' and dataline[0] !='':
                datas[dataline[0]].append(dataline[1:])

results = dict()
for k, v in datas.items():
    results[k] = pd.DataFrame(v, columns=gnss_map[k])
for k, df in results.items():
    for col in df.columns:
        if col == 'CodeType':
            continue
        results[k][col] = pd.to_numeric(results[k][col])

results['Raw']

"""utcTimeMillis - Milliseconds since UTC epoch (1970/1/1), converted from GnssClock

TimeNanos - The GNSS receiver internal hardware clock value in nanoseconds.


LeapSecond - The leap second associated with the clock's time.


TimeUncertaintyNanos - The clock's time uncertainty (1-sigma) in nanoseconds.


FullBiasNanos - The difference between hardware clock getTimeNanos() inside GPS receiver and the true GPS time since 0000Z, January 6, 1980, in nanoseconds.


BiasNanos - The clock's sub-nanosecond bias.


BiasUncertaintyNanos - The clock's bias uncertainty (1-sigma) in nanoseconds.

DriftNanosPerSecond - The clock's drift in nanoseconds per second.


DriftUncertaintyNanosPerSecond - The clock's drift uncertainty (1-sigma) in nanoseconds per second.


HardwareClockDiscontinuityCount - Count of hardware clock discontinuities.


Svid - The satellite ID. More info can be found here.


TimeOffsetNanos - The time offset at which the measurement was taken in nanoseconds.


State - Integer signifying sync state of the satellite. Each bit in the integer attributes to a particular state information of the measurement. See the metadata/raw_state_bit_map.json file for the mapping between bits and states.

ReceivedSvTimeNanos - The received GNSS satellite time, at the measurement time, in nanoseconds.


ReceivedSvTimeUncertaintyNanos - The error estimate (1-sigma) for the received GNSS time, in nanoseconds.


Cn0DbHz - The carrier-to-noise density in dB-Hz.


PseudorangeRateMetersPerSecond - The pseudorange rate at the timestamp in m/s.


PseudorangeRateUncertaintyMetersPerSecond - The pseudorange's rate uncertainty (1-sigma) in m/s.


AccumulatedDeltaRangeState - This indicates the state of the 'Accumulated Delta Range' measurement. Each bit in the integer attributes to state of the measurement. See the metadata/accumulated_delta_range_state_bit_map.json file for the mapping between bits and states.


AccumulatedDeltaRangeMeters - The accumulated delta range since the last channel reset, in meters.

AccumulatedDeltaRangeUncertaintyMeters - The accumulated delta range's uncertainty (1-sigma) in meters.


CarrierFrequencyHz - The carrier frequency of the tracked signal.


CarrierCycles - The number of full carrier cycles between the satellite and the receiver. Null in these datasets.


CarrierPhase - The RF phase detected by the receiver. Null in these datasets.


CarrierPhaseUncertainty - The carrier-phase's uncertainty (1-sigma). Null in these datasets.


MultipathIndicator - A value indicating the 'multipath' state of the event.

SnrInDb - The (post-correlation & integration) Signal-to-Noise ratio (SNR) in dB.


ConstellationType - GNSS constellation type. It's an integer number, whose mapping to string value is provided in the constellation_type_mapping.csv file.


AgcDb - The Automatic Gain Control level in dB.


BasebandCn0DbHz - The baseband carrier-to-noise density in dB-Hz. Only available in Android 11.


FullInterSignalBiasNanos - The GNSS measurement's inter-signal bias in nanoseconds with sub-nanosecond accuracy. Only available in Pixel 5 logs in 2021. Only available in Android 11.


FullInterSignalBiasUncertaintyNanos - The GNSS measurement's inter-signal bias uncertainty (1 sigma) in nanoseconds with sub-nanosecond accuracy. Only available in Android 11.

SatelliteInterSignalBiasNanos - The GNSS measurement's satellite inter-signal bias in nanoseconds with sub-nanosecond accuracy. Only available in Android 11.


SatelliteInterSignalBiasUncertaintyNanos - The GNSS measurement's satellite inter-signal bias uncertainty (1 sigma) in nanoseconds with sub-nanosecond accuracy. Only available in Android 11.


CodeType - The GNSS measurement's code type. Only available in recent logs.


ChipsetElapsedRealtimeNanos - The elapsed real-time of this clock since system boot, in nanoseconds. Only available in recent logs.


"""

results['UncalAccel']

results['UncalGyro']

results[ 'UncalMag']

results['Fix']

results['Status']

"""UnixTimeMillis - Milliseconds since UTC epoch (1970/1/1), reported from the last location changed by GPS provider.


SignalCount - The total number of satellites in the satellite list.


SignalIndex - The index of current signal.


ConstellationType: The constellation type of the satellite at the specified index.


Svid: The satellite ID.


CarrierFrequencyHz: The carrier frequency of the signal tracked.

Cn0DbHz: The carrier-to-noise density at the antenna of the satellite at the specified index in dB-Hz.


AzimuthDegrees: The azimuth the satellite at the specified index.


ElevationDegrees: The elevation of the satellite at the specified index.


UsedInFix: Whether the satellite at the specified index was used in the calculation of the most recent position fix.


HasAlmanacData: Whether the satellite at the specified index has almanac data.


HasEphemerisData: Whether the satellite at the specified index has ephemeris data.


BasebandCn0DbHz: The baseband carrier-to-noise density of the satellite at the specified index in dB-Hz.

"""

results['OrientationDeg']

"""utcTimeMillis - The sum of elapsedRealtimeNanos below and the estimated device boot time at UTC, after a recent NTP (Network Time Protocol) sync.

elapsedRealtimeNanos - The time in nanoseconds at which the event happened.


yawDeg - If the screen is in portrait mode, this value equals the Azimuth degree (modulus to 0°~360°). If the screen is in landscape mode, it equals the sum (modulus to 0°~360°) of the screen rotation angle (either 90° or 270°) and the Azimuth degree. Azimuth, refers to the angle of rotation about the -z axis. This value represents the angle between the device's y axis and the magnetic north pole.

rollDeg - Roll, angle of rotation about the y axis. This value represents the angle between a plane perpendicular to the device's screen and a plane perpendicular to the ground.


pitchDeg - Pitch, angle of rotation about the x axis. This value represents the angle between a plane parallel to the device's screen and a plane parallel to the ground.

# gnss_rinex.20o
"""

f = open('train/2020-05-15-US-MTV-1/GooglePixel4XL/supplemental/gnss_rinex.20o', 'r')
rinex = f.read()
f.close()
rinex[:500]

rinex =pd.read_csv('train/2020-05-15-US-MTV-1/GooglePixel4XL/supplemental/gnss_rinex.20o')
rinex

"""# span_log.nmea"""

f = open('train/2020-05-15-US-MTV-1/GooglePixel4XL/supplemental/span_log.nmea', 'r')
span = f.read()
f.close()
span[:500]

span = pd.read_csv('train/2020-05-15-US-MTV-1/GooglePixel4XL/supplemental/span_log.nmea')
span

"""# Presentation"""

import pandas as pd
sub=pd.read_csv('sample_submission.csv')
sub

"""Removal of Multi-path geometries"""

!pip install --upgrade geopandas
!pip install --upgrade shapely
!pip install --upgrade descartes

from shapely.geometry import MultiPolygon, Polygon

#Download geojson file of US San Francisco Bay Area.
r = requests.get("https://data.sfgov.org/api/views/wamw-vt4s/rows.json?accessType=DOWNLOAD")
r.raise_for_status()

#get geojson from response
data = r.json()

#get polygons that represents San Francisco Bay Area.
shapes = []
for d in data["data"]:
    shapes.append(shapely.wkt.loads(d[8]))
    
#Convert list of polygons to geopandas dataframe.
gdf_bayarea = pd.DataFrame()

#only 6 and 7th object is used
for shp in shapes[5:7]:
    tmp=pd.DataFrame(shp.geoms,columns=["geometry"])
    gdf_bayarea = pd.concat([gdf_bayarea, tmp])
gdf_bayarea = GeoDataFrame(gdf_bayarea)

gdf_bayarea

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# collectionNames=[item.split("/")[-1] for item in glob("train/*")]
# gdfs=[]
# for collectionName in collectionNames:
#     gdfs_each_collectionName=[]
#     csv_paths=glob(f"train/{collectionName}/*/ground_truth.csv")
#     for csv_path in csv_paths:
#         df_gt=pd.read_csv(csv_path)
#         df_gt["geometry"]=[Point(lngDeg,latDeg) for lngDeg,latDeg in zip(df_gt["LatitudeDegrees"],df_gt["LongitudeDegrees"])]
#         gdfs_each_collectionName.append(GeoDataFrame(df_gt))
#     gdfs.append(gdfs_each_collectionName)
# colors=["blue","green","purple","orange"]

gdfs_each_collectionName

for collectionName, gdfs_each_collectionName in zip(collectionNames, gdfs):
    fig, axs = plt.subplots(1, 2, figsize=(15, 5))
    gdf_bayarea.plot(figsize=(10,10), color='none', edgecolor='gray', zorder=5, ax=axs[0])
    for i, gdf in enumerate(gdfs_each_collectionName):
        g2 = gdf.plot(color=colors[i], ax=axs[1])
        g2.set_title(f"Phone track of {collectionName}")

!pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c smartphone-decimeter-2022

!unzip \*.zip && rm *.zip

!pip install geopandas

!pip install shap

import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
import os
!pip install folium
!pip install simdkalman
import pickle
import sys
import warnings
from glob import glob
import requests
import folium
from shapely.geometry import Point,shape
import shapely.wkt
from geopandas import GeoDataFrame
import simdkalman
import shap
import xgboost
from scipy.stats import spearmanr
from sklearn.ensemble import(ExtraTreesRegressor,GradientBoostingRegressor,RandomForestRegressor)
from sklearn.metrics import accuracy_score,mean_squared_error
from tqdm.notebook import tqdm
pd.options.mode.use_inf_as_na=True

import warnings
warnings.filterwarnings("ignore")

import pandas as pd
df=pd.read_csv('sample_submission.csv')

df.head()

df.info()

df['tripId'].value_counts()

X=df.iloc[:,[2,3]].values
print(X)

y=df.iloc[:,0:4].values
print(y)

df.head()

X=df[['UnixTimeMillis','LatitudeDegrees','LongitudeDegrees']]
y=df['tripId']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=0)

import lightgbm
from lightgbm import *

import lightgbm as lgb
clf=lgb.LGBMClassifier()
clf.fit(X_train,y_train)

y_pred=clf.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy=accuracy_score(y_pred,y_test)
print('LightGBM Model Accuracy:{0:0.4f}'.format(accuracy_score(y_test,y_pred)))

y_pred_train=clf.predict(X_train)

print('Training-set accuracy score:{0:0.4f}'.format(accuracy_score(y_train,y_pred_train)))

print('Training set score:{:.4f}'.format(clf.score(X_train,y_train)))
print('Test set score:{:.4f}'.format(clf.score(X_test,y_test)))

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)
print('Confusion matrix\n\n',cm)
print('\n True Positives(TP)= ',cm[0][0])
print('\n True Negatives= ',cm[1,1])
print('\n False Positives= ',cm[0][1])
print('\n False Negatives= ',cm[1][0])

from sklearn.utils.multiclass import unique_labels
unique_labels(y_test)

lables=unique_labels(y_test)
def plot(y_true,y_pred):
  labels=unique_labels(y_test)
  columns=[f'Predicted{label}' for label in labels]
  index=[f'Actual{label}' for label in labels]
  table=pd.DataFrame(confusion_matrix(y_true,y_pred),columns=columns,index=index)
  return table
plot(y_test,y_pred)

import seaborn as sns
def plot2(y_true,y_pred):
  labels=unique_labels(y_test)
  column=[f'Predicted{label}' for label in labels]
  indices=[f'Actual{label}' for label in labels]
  table=pd.DataFrame(confusion_matrix(y_true,y_pred),columns=column,index=indices)
  return sns.heatmap(table,annot=True,fmt='d',cmap='viridis')

plot2(y_test,y_pred)

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

from google.colab import drive
drive.mount('/drive')

cd /drive/MyDrive/Colab Notebooks/data/projfiles

! pip install flask-ngrok
! pip install flask-bootstrap

from flask import Flask, render_template
from flask_bootstrap import Bootstrap
from flask_ngrok import run_with_ngrok

! pip install pyngrok
! ngrok authtoken 2M8J9EAB1QbYsAoR33NYZHI9Uzh_6gWXjAkREVzE1xdZa5KSc

app = Flask(__name__)
app.static_folder = '/drive/MyDrive/Colab Notebooks/data/projfiles'
bootstrap = Bootstrap(app)
run_with_ngrok(app)

@app.route("/")
def home():
  return render_template('main.html');
app.run()

from google.colab import drive
drive.mount('/content/drive')

@app.route("/")
def home():
  return '<html lang="eng"><head><meta charset="utf-8"><title>main login</title></head><style>body{margin: 0;padding: 0;font-family: sans-serif;background: rgb(10, 20, 41);}h1{color: white;width: 800px;padding: 10px;position: absolute;top: 2%;left: 10%;text-transform: uppercase;font-weight: 400;cursor: pointer;}.box{border-radius: 20px;width: 300px;padding: 50px;padding-top: 50px;position: absolute;top: 50%;left: 50%;transform: translate(-50%,-50%);background: linear-gradient(to right,#2C3E50,#000000);text-align: center;}.box h1{color: white;text-transform: uppercase;font-weight: 800;}.box input[type="text"]{border: 0;background: none;display: block;margin: 20px auto;text-align: center;border: 2px solid #D2A813;padding: 14px 10px;width: 200px;outline: none;color: white;border-radius: 10px;transition: 0.25s;}.box input[type="text"]:focus{width: 280px;border-color: white;}#subbutton{border: 0;background: none;display: block;margin: 20px auto;text-align: center;border: 2px solid yellow;padding: 14px 40px;width: 200px;outline: none;color: white;border-radius: 24px;transition: 0.25s;cursor: pointer;}#division2{display: none;}.box input[type="submit"]:hover{background-color: rgb(56, 64, 56);}select, label {border: 0;background: none;display: block;margin: 20px auto;text-align: center;border: 2px solid #D2A813;padding: 14px 10px;width: 200px;outline: none;color: white;border-radius: 10px;transition: 0.25s;}select:focus{width: 280px;border-color: white;background-color: rgb(56, 64, 56);}#division2{left:25%;}#confusion{padding: 10%;width: 150%;}#mobgraph{padding: 5%;width: 90%;}</style><body><div id="division1" class="box"><label for="Mobile">Select Phone Model</label><select id="Mobile" name="lang" required ><option value="GooglePixel4">GooglePixel4</option><option value="GooglePixel4XL">GooglePixel4XL</option><option value="XiaomiMi8">XiaomiMi8</option><option value="GooglePixel5">GooglePixel5</option><option value="SamsungGalaxyS20Ultra">SamsungGalaxyS20Ultra</option><option value="GooglePixel6Pro">GooglePixel6Pro</option></select><input type="text" name="" id="Latitude" placeholder="Input Latitude Position"><input type="text" name="" id="Longitude" placeholder="Input Longitude Position"><button type="submit" id="subbutton" onclick="myFunction()">Submit</button></div><div id="division2" class="box"><img id="confusion" src="matrix.JPG"></img><img id="mobgraph" src="phone1.JPG"></img></div> <script>function myFunction(){var mobName = document.getElementById("Mobile").value;var Lat = Number(document.getElementById("Latitude").value);var Long = Number(document.getElementById("Longitude").value);switch(mobName){case "GooglePixel4":document.getElementById("mobgraph").src = "phone1.JPG";break;case "GooglePixel4XL":document.getElementById("mobgraph").src = "phone2.JPG";break;case "XiaomiMi8":document.getElementById("mobgraph").src = "phone3.JPG";break;case "GooglePixel5":document.getElementById("mobgraph").src = "phone4.JPG";break;case "SamsungGalaxyS20Ultra":document.getElementById("mobgraph").src = "phone5.JPG";break;case "GooglePixel6Pro":document.getElementById("mobgraph").src = "phone6.JPG";break;}document.getElementById("division1").style.display = "none";document.getElementById("division2").style.display = "block";}</script></body></html>'
app.run()

